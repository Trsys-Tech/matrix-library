// vite.config.ts
import dts from "file:///D:/Projects/Lindahl/ui-library/node_modules/vite-plugin-dts/dist/index.mjs";
import { defineConfig } from "file:///D:/Projects/Lindahl/ui-library/node_modules/vite/dist/node/index.js";
import react from "file:///D:/Projects/Lindahl/ui-library/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { resolve, basename } from "path";

// package.json
var dependencies = {
  "@radix-ui/react-accordion": "^1.2.1",
  "@radix-ui/react-avatar": "^1.1.1",
  "@radix-ui/react-checkbox": "^1.1.2",
  "@radix-ui/react-collapsible": "^1.1.1",
  "@radix-ui/react-context": "^1.1.1",
  "@radix-ui/react-context-menu": "^2.2.2",
  "@radix-ui/react-dialog": "^1.1.2",
  "@radix-ui/react-popover": "^1.1.2",
  "@radix-ui/react-progress": "^1.1.1",
  "@radix-ui/react-radio-group": "^1.2.1",
  "@radix-ui/react-select": "^2.1.2",
  "@radix-ui/react-separator": "^1.1.0",
  "@radix-ui/react-slot": "^1.1.0",
  "@radix-ui/react-switch": "^1.1.1",
  "@radix-ui/react-tabs": "^1.1.1",
  "@radix-ui/react-toast": "^1.2.2",
  "@radix-ui/react-tooltip": "^1.1.4",
  "@radix-ui/react-visually-hidden": "^1.1.0",
  "@trsys-tech/matrix-icons": "^0.0.7",
  "ag-grid-community": "^33.3.0",
  "ag-grid-react": "^32.3.3",
  clsx: "^2.1.1",
  cmdk: "^1.0.4",
  "lucide-react": "^0.454.0",
  "react-day-picker": "^9.3.0",
  "tailwind-merge": "^2.5.4",
  "tailwind-variants": "^0.3.0",
  "tailwindcss-animate": "^1.0.7",
  uuid: "^11.0.5",
  vaul: "^1.1.1"
};
var peerDependencies = {
  "@hookform/resolvers": "^3.9.1",
  react: "^18.3.1",
  "react-dom": "^18.3.1",
  "react-hook-form": "^7.53.1",
  zod: "^3.23.8"
};

// vite.config.ts
var __vite_injected_original_dirname = "D:\\Projects\\Lindahl\\ui-library";
function getComponentName(entryName) {
  const name = basename(entryName);
  return name.replace(/\..+$/, "").toLowerCase();
}
var vite_config_default = defineConfig({
  plugins: [
    dts({
      include: ["src"],
      exclude: ["src/**/*.stories.ts", "src/**/*.stories.tsx"],
      staticImport: true
    }),
    react({
      jsxRuntime: "automatic"
    })
  ],
  build: {
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src", "index.ts"),
      formats: ["es"],
      fileName: (ext, entry) => {
        const componentName = getComponentName(entry);
        return `${componentName}.${ext}.js`;
      }
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies), ...Object.keys(dependencies), "react/jsx-runtime"],
      output: { preserveModules: true, exports: "named" }
    },
    target: "esnext",
    sourcemap: true
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
