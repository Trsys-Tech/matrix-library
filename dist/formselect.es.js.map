{"version":3,"file":"formselect.es.js","sources":["../src/components/form-select/FormSelect.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { Spinner } from \"@trsys-tech/matrix-icons\";\r\nimport { ControllerProps, FieldPath, FieldValues, useController } from \"react-hook-form\";\r\nimport { SelectContentProps, SelectItemProps, SelectProps, SelectTriggerProps, SelectValueProps } from \"@radix-ui/react-select\";\r\n\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"../form/Form\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../select/Select\";\r\n\r\ntype FormSelectProps<TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> = Omit<\r\n  ControllerProps<TFieldValues, TName>,\r\n  \"render\"\r\n> &\r\n  React.ComponentProps<typeof FormItem> & {\r\n    label: string;\r\n    options: { value: string | number; label: string | number }[];\r\n    loading?: boolean;\r\n    loadingText?: string;\r\n    emptyOptionsText?: string;\r\n    placeholder?: string;\r\n    required?: boolean;\r\n    readOnly?: boolean;\r\n    slotProps?: {\r\n      formLabelProps?: React.HTMLAttributes<HTMLLabelElement> & React.RefAttributes<HTMLLabelElement>;\r\n      formMessageProps?: React.HTMLAttributes<HTMLParagraphElement> & React.RefAttributes<HTMLParagraphElement>;\r\n      selectProps?: SelectProps;\r\n      selectTriggerProps?: SelectTriggerProps;\r\n      selectValueProps?: Omit<SelectValueProps, \"placeholder\">;\r\n      selectContentProps?: SelectContentProps;\r\n      selectItemProps?: SelectItemProps;\r\n    };\r\n  };\r\n\r\nconst FormSelect = <TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(\r\n  props: FormSelectProps<TFieldValues, TName>,\r\n) => {\r\n  const {\r\n    name,\r\n    control,\r\n    defaultValue,\r\n    disabled,\r\n    readOnly,\r\n    rules,\r\n    shouldUnregister,\r\n    label,\r\n    options,\r\n    loading,\r\n    loadingText,\r\n    emptyOptionsText,\r\n    placeholder,\r\n    slotProps,\r\n    required,\r\n    ...formItemProps\r\n  } = props;\r\n\r\n  const { field } = useController({ name, control, rules, defaultValue, disabled, shouldUnregister });\r\n\r\n  const isNumericValue = typeof options[0]?.value === \"number\";\r\n\r\n  const handleChange = (value: string) => {\r\n    if (isNumericValue) {\r\n      field.onChange(Number(value));\r\n    } else {\r\n      field.onChange(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormField\r\n      control={control}\r\n      name={name}\r\n      defaultValue={defaultValue}\r\n      disabled={disabled}\r\n      rules={rules}\r\n      shouldUnregister={shouldUnregister}\r\n      render={({ field }) => {\r\n        return (\r\n          <FormItem {...formItemProps}>\r\n            <FormLabel {...(slotProps?.formLabelProps ?? {})}>\r\n              {label}\r\n              {required && <span className=\"text-danger text-sm leading-4\">*</span>}\r\n            </FormLabel>\r\n            <Select\r\n              {...(slotProps?.selectProps ?? {})}\r\n              disabled={disabled || readOnly}\r\n              onValueChange={handleChange}\r\n              value={field.value !== undefined ? String(field.value) : undefined}\r\n            >\r\n              <FormControl>\r\n                <SelectTrigger\r\n                  aria-required={required}\r\n                  disabled={disabled}\r\n                  {...(slotProps?.selectTriggerProps ?? {})}\r\n                  className={cn(\"*:truncate [&>span]:inline-block\", slotProps?.selectTriggerProps?.className)}\r\n                >\r\n                  <SelectValue {...(slotProps?.selectValueProps ?? {})} placeholder={placeholder ?? label} />\r\n                </SelectTrigger>\r\n              </FormControl>\r\n              <SelectContent {...(slotProps?.selectContentProps ?? {})}>\r\n                {loading && (\r\n                  <SelectItem {...(slotProps?.selectItemProps ?? {})} value=\"-1\" disabled>\r\n                    <Spinner className=\"inline-block mb-0.5\" /> {loadingText || \"Loading...\"}\r\n                  </SelectItem>\r\n                )}\r\n                {!loading && !options.length ? (\r\n                  <SelectItem\r\n                    {...(slotProps?.selectItemProps ?? {})}\r\n                    value=\"8fdcaeb67c8ad943c80fe54c3b1059b700d9254389a38a4a1fc39a6eee728623\"\r\n                    disabled\r\n                  >\r\n                    {emptyOptionsText || \"No Items\"}\r\n                  </SelectItem>\r\n                ) : null}\r\n                {options?.map((option, index) => (\r\n                  <SelectItem {...(slotProps?.selectItemProps ?? {})} value={String(option.value)} key={index + \"_\" + label}>\r\n                    {option.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            <FormMessage {...(slotProps?.formMessageProps ?? {})} />\r\n          </FormItem>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport { FormSelect, type FormSelectProps };\r\n"],"names":["FormSelect","props","name","control","defaultValue","disabled","readOnly","rules","shouldUnregister","label","options","loading","loadingText","emptyOptionsText","placeholder","slotProps","required","formItemProps","field","useController","isNumericValue","handleChange","value","jsx","FormField","jsxs","FormItem","FormLabel","Select","FormControl","SelectTrigger","cn","SelectValue","SelectContent","SelectItem","Spinner","option","index","createElement","FormMessage"],"mappings":"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"}