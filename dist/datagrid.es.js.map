{"version":3,"file":"datagrid.es.js","sources":["../src/components/data-grid/DataGrid.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { forwardRef, HTMLAttributes, useMemo } from \"react\";\r\nimport { AgGridReact, AgGridReactProps } from \"ag-grid-react\";\r\nimport { GridApi, GridReadyEvent, themeQuartz, AllCommunityModule, ModuleRegistry, Theme } from \"ag-grid-community\";\r\nimport { CircleXmark, ElipsisVertical, Magnifier, Print, Refresh, Snowflake, Trashcan } from \"@trsys-tech/matrix-icons\";\r\n\r\nimport { cn } from \"../../lib/utils\";\r\nimport { printHtml } from \"../../lib/printHtml\";\r\nimport { TextField } from \"../text-field/TextField\";\r\nimport { Button, ButtonProps } from \"../button/Button\";\r\nimport { IconButton, IconButtonProps } from \"../icon-botton/IconButton\";\r\nimport { Popover, PopoverContent, PopoverContentProps, PopoverProps, PopoverTrigger, PopoverTriggerProps } from \"../popover/Popover\";\r\n\r\n// Register all Community features\r\n// Todo: Register only the required features\r\nModuleRegistry.registerModules([AllCommunityModule]);\r\n\r\nconst dataGridDefaultTheme = themeQuartz.withParams({\r\n  fontFamily: \"DMSans\",\r\n  fontSize: \"12px\",\r\n  headerFontSize: \"12px\",\r\n  headerFontWeight: 700,\r\n  headerBackgroundColor: \"hsl(var(--primary-50))\",\r\n  backgroundColor: \"hsl(var(--gray-0))\",\r\n  accentColor: \"hsl(var(--primary-300))\",\r\n  foregroundColor: \"hsl(var(--text-500))\",\r\n  cellTextColor: \"hsl(var(--text-500))\",\r\n});\r\n\r\ntype DataGridContext = {\r\n  api: GridApi | null;\r\n  setApi: (value: GridApi) => void;\r\n  rowData: any[] | null | undefined;\r\n  setRowData: (value: any[] | null | undefined) => void;\r\n  gridId: string;\r\n  quickFilterText: string;\r\n  setQuickFilterText: (value: string) => void;\r\n  actionbarExists: boolean;\r\n  setActionbarExists: (value: boolean) => void;\r\n  actionbarHeight: number;\r\n  setActionbarHeight: (value: number) => void;\r\n};\r\n\r\nconst DataGridContext = React.createContext<DataGridContext | null>(null);\r\n\r\nconst useDataGrid = () => {\r\n  const context = React.useContext(DataGridContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useDataGrid should be used within <DataGrid>\");\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\ntype DataGridProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst DataGrid: React.FC<DataGridProps> = ({ children }) => {\r\n  const gridId = React.useId();\r\n  const [api, setApi] = React.useState<GridApi | null>(null);\r\n  const [rowData, setRowData] = React.useState<any[] | null | undefined>([]);\r\n  const [actionbarHeight, setActionbarHeight] = React.useState(0);\r\n\r\n  const [quickFilterText, setQuickFilterText] = React.useState(\"\");\r\n  const [actionbarExists, setActionbarExists] = React.useState(false);\r\n  return (\r\n    <DataGridContext.Provider\r\n      value={{\r\n        api,\r\n        setApi,\r\n        rowData,\r\n        setRowData,\r\n        gridId,\r\n        quickFilterText,\r\n        setQuickFilterText,\r\n        actionbarExists,\r\n        setActionbarExists,\r\n        actionbarHeight,\r\n        setActionbarHeight,\r\n      }}\r\n    >\r\n      {children}\r\n    </DataGridContext.Provider>\r\n  );\r\n};\r\n\r\ntype DataGridContentProps = Omit<AgGridReactProps, \"theme\"> & {\r\n  theme?: Theme;\r\n};\r\n\r\nconst DataGridContent = forwardRef<AgGridReact, DataGridContentProps>(\r\n  ({ theme: propTheme, onGridReady, quickFilterText: quickFilterTextProps, rowData: rowDataProps, containerStyle, ...props }, ref) => {\r\n    const context = React.useContext(DataGridContext);\r\n\r\n    if (!context) {\r\n      throw new Error(\"DataGridContent should be used within <DataGrid>\");\r\n    }\r\n    const { rowData, setRowData, actionbarExists, setApi, setQuickFilterText, quickFilterText, gridId, actionbarHeight } = context;\r\n\r\n    const theme = useMemo(() => {\r\n      return dataGridDefaultTheme.withParams({\r\n        headerHeight: 40,\r\n        wrapperBorderRadius: actionbarExists ? \"0px 0px 8px 8px\" : \"8px\",\r\n      });\r\n    }, [actionbarExists]);\r\n\r\n    const handleGridReady = (e: GridReadyEvent) => {\r\n      setApi(e.api);\r\n      onGridReady?.(e);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      setRowData(rowDataProps);\r\n    }, [rowDataProps, setRowData]);\r\n\r\n    React.useEffect(() => {\r\n      if (quickFilterTextProps !== undefined) {\r\n        setQuickFilterText(quickFilterTextProps ?? \"\");\r\n      }\r\n    }, [quickFilterTextProps, setQuickFilterText]);\r\n\r\n    return (\r\n      <AgGridReact\r\n        gridId={gridId}\r\n        theme={propTheme ?? theme}\r\n        rowData={rowData}\r\n        quickFilterText={quickFilterText}\r\n        onGridReady={handleGridReady}\r\n        containerStyle={{ height: `calc(100% - ${actionbarHeight}px)`, ...containerStyle }}\r\n        {...props}\r\n        ref={ref}\r\n      />\r\n    );\r\n  },\r\n);\r\n\r\nDataGridContent.displayName = \"DataGridContent\";\r\n\r\ntype DatagridActionBarProps = HTMLAttributes<HTMLDivElement> & {};\r\n\r\nconst DataGridActionBar: React.FC<DatagridActionBarProps> = ({ className, ...props }) => {\r\n  const context = React.useContext(DataGridContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"DataGridActionBar should be used within <DataGrid>\");\r\n  }\r\n  const ref = React.useRef<HTMLDivElement | null>(null);\r\n  const { setActionbarExists, setActionbarHeight } = context;\r\n  const { children } = props;\r\n\r\n  React.useEffect(() => {\r\n    setActionbarExists(true);\r\n    return () => setActionbarExists(false);\r\n  }, [setActionbarExists]);\r\n\r\n  React.useEffect(() => {\r\n    if (ref.current) {\r\n      setActionbarHeight(ref.current.clientHeight);\r\n    }\r\n  }, [setActionbarHeight]);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative flex items-center p-2 h-12 w-full bg-gray-0 border border-gray-200 border-b-0 -mb-[1px] z-10 rounded-t-[8px]\",\r\n        className,\r\n      )}\r\n      ref={ref}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype SearchActionProps = HTMLAttributes<HTMLDivElement> & {\r\n  defaultOpen?: boolean;\r\n};\r\n\r\nconst SearchAction: React.FC<SearchActionProps> = ({ defaultOpen = false, className, ...props }) => {\r\n  const context = React.useContext(DataGridContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"SearchAction should be used within <DataGrid>\");\r\n  }\r\n\r\n  const { quickFilterText, setQuickFilterText } = context;\r\n\r\n  const [isSearchInputOpen, setIsSearchInputOpen] = React.useState(defaultOpen);\r\n  const [isClosing, setIsClosing] = React.useState(false);\r\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\r\n\r\n  const handleClear = () => {\r\n    context.setQuickFilterText(\"\");\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setIsSearchInputOpen(true);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (isSearchInputOpen && inputRef?.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isSearchInputOpen]);\r\n\r\n  const handleClose = () => {\r\n    setIsClosing(true);\r\n    context.setQuickFilterText(\"\");\r\n    setTimeout(() => {\r\n      setIsSearchInputOpen(false);\r\n      setIsClosing(false);\r\n    }, 200);\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"max-w-60\", className)} {...props}>\r\n      {isSearchInputOpen || isClosing ? (\r\n        <TextField\r\n          ref={inputRef}\r\n          className={cn(\"relative h-7.5\", isSearchInputOpen && !isClosing ? \"animate-input-open\" : \"\", isClosing && \"animate-input-close\")}\r\n          onChange={e => setQuickFilterText(e.target.value)}\r\n          value={quickFilterText}\r\n          startAdornment={\r\n            <IconButton variant=\"toolbar\" className=\"p-0.5 h-6 w-6 border-none mx-1\" onClick={handleClose}>\r\n              <Magnifier className=\"w-5 h-5\" />\r\n            </IconButton>\r\n          }\r\n          endAdornment={\r\n            quickFilterText && (\r\n              <IconButton variant=\"toolbar\" className=\"p-0.5 w-6 h-6 border-none mx-1\" onClick={handleClear}>\r\n                <CircleXmark className=\"w-5 h-5\" />\r\n              </IconButton>\r\n            )\r\n          }\r\n        />\r\n      ) : (\r\n        <IconButton variant=\"toolbar\" className=\"p-0.5 w-6 h-6 m-1\" onClick={handleOpen}>\r\n          <Magnifier className=\"w-5 h-5\" />\r\n        </IconButton>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype FreezeActionProps = ButtonProps & {\r\n  freezeText?: string;\r\n  unFreezeText?: string;\r\n};\r\n\r\nconst FreezeAction: React.FC<FreezeActionProps> = ({ freezeText, unFreezeText, onClick, disabled, ...props }) => {\r\n  const context = React.useContext(DataGridContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"FreezeAction should be used within <DataGrid>\");\r\n  }\r\n\r\n  const [pinnedRowCount, setPinnedRowCount] = React.useState(0);\r\n  const [selectedRowsCount, setSelectedRowsCount] = React.useState(0);\r\n\r\n  const { api, rowData } = context;\r\n\r\n  const freezeRows = () => {\r\n    if (!api) return;\r\n\r\n    // Get currently selected rows\r\n    const selectedRows = api.getSelectedNodes();\r\n\r\n    if (selectedRows.length > 0) {\r\n      // Pin the selected rows\r\n      api.setGridOption(\r\n        \"pinnedTopRowData\",\r\n        selectedRows.map(row => row.data),\r\n      );\r\n\r\n      // Get current row data\r\n      const allData = api.getRenderedNodes();\r\n      // Filter out pinned rows from the main data\r\n      const updatedNodes = allData.filter(row => !selectedRows.some(pinnedRow => pinnedRow.id === row.id));\r\n\r\n      // Update the grid with the filtered data\r\n      api.setGridOption(\r\n        \"rowData\",\r\n        updatedNodes.map(node => node.data),\r\n      );\r\n    }\r\n  };\r\n\r\n  const unfreezeRows = () => {\r\n    if (!api) return;\r\n    api.setGridOption(\"pinnedTopRowData\", []);\r\n    api.setGridOption(\"rowData\", rowData);\r\n  };\r\n\r\n  const handleFreezing = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (api) {\r\n      const pinnedRowsCount = api.getPinnedTopRowCount();\r\n      if (pinnedRowsCount > 0) {\r\n        unfreezeRows();\r\n      } else {\r\n        freezeRows();\r\n      }\r\n    }\r\n    onClick?.(e);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    api?.addEventListener(\"pinnedRowDataChanged\", () => {\r\n      setPinnedRowCount(api.getPinnedTopRowCount());\r\n    });\r\n\r\n    api?.addEventListener(\"selectionChanged\", () => {\r\n      setSelectedRowsCount(api.getSelectedNodes().length);\r\n    });\r\n\r\n    return () => {\r\n      if (api?.isDestroyed()) return;\r\n      api?.removeEventListener(\"pinnedRowDataChanged\", () => {\r\n        setPinnedRowCount(api.getPinnedTopRowCount());\r\n      });\r\n\r\n      api?.removeEventListener(\"selectionChanged\", () => {\r\n        setSelectedRowsCount(api.getSelectedNodes().length);\r\n      });\r\n    };\r\n  }, [api]);\r\n\r\n  return (\r\n    <Button\r\n      variant=\"text\"\r\n      onClick={handleFreezing}\r\n      startIcon={<Snowflake className=\"w-4.5 h-4.5\" />}\r\n      disabled={(!pinnedRowCount && !selectedRowsCount) || disabled}\r\n      {...props}\r\n    >\r\n      {pinnedRowCount ? (unFreezeText ?? \"Unfreeze\") : (freezeText ?? \"Freeze\")}\r\n    </Button>\r\n  );\r\n};\r\n\r\ntype PrintActionProps = IconButtonProps & {};\r\n\r\nconst PrintAction: React.FC<PrintActionProps> = ({ children, className, onClick, ...props }) => {\r\n  const context = React.useContext(DataGridContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"PrintAction should be used within <DataGrid>\");\r\n  }\r\n\r\n  const handlePrint = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (context.api) {\r\n      context.api.setGridOption(\"domLayout\", \"print\");\r\n\r\n      setTimeout(() => {\r\n        const element = document.querySelector(\"[grid-id='\" + context.gridId + \"']\") as HTMLElement;\r\n        const header = document.head;\r\n        const html = `<html>\r\n        ${header.innerHTML}\r\n        ${element.outerHTML}\r\n        </html>`;\r\n        printHtml(html);\r\n        context?.api?.setGridOption(\"domLayout\", undefined);\r\n      });\r\n    }\r\n    onClick?.(e);\r\n  };\r\n\r\n  return (\r\n    <IconButton variant=\"toolbar\" className={cn(\"p-0.5 w-6 h-6\", className)} onClick={handlePrint} {...props}>\r\n      {children ?? <Print className=\"w-5 h-5\" />}\r\n    </IconButton>\r\n  );\r\n};\r\n\r\ntype RefreshActionProps = Omit<IconButtonProps, \"onClick\"> & {\r\n  onRefresh: () => void;\r\n};\r\n\r\nconst RefreshAction: React.FC<RefreshActionProps> = ({ className, onRefresh, children, loading, ...props }) => {\r\n  const context = React.useContext(DataGridContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"RefreshAction should be used within <DataGrid>\");\r\n  }\r\n\r\n  const handleRefresh = () => {\r\n    onRefresh();\r\n  };\r\n\r\n  return (\r\n    <IconButton\r\n      className={cn(\"p-0.5 w-6 h-6\", loading && \"disabled:bg-transparent\", className)}\r\n      variant=\"toolbar\"\r\n      onClick={handleRefresh}\r\n      disabled={loading}\r\n      {...props}\r\n    >\r\n      {children ?? <Refresh className={cn(\"w-4.5 h-4.5\", loading && \"animate-spin\")} />}\r\n    </IconButton>\r\n  );\r\n};\r\n\r\ntype DeleteActionProps = Omit<ButtonProps, \"onClick\"> & {\r\n  onDelete: () => void;\r\n};\r\n\r\nconst DeleteAction: React.FC<DeleteActionProps> = ({ onDelete, children, ...props }) => {\r\n  const handleDelete = () => {\r\n    onDelete();\r\n  };\r\n\r\n  return (\r\n    <Button variant=\"danger\" onClick={handleDelete} startIcon={<Trashcan className=\"w-4.5 h-4.5\" />} {...props}>\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\ntype ExtraActionsProps = PopoverContentProps & {\r\n  children: React.ReactNode;\r\n  slotProps?: {\r\n    triggerProps?: PopoverTriggerProps;\r\n    popoverProps?: PopoverProps;\r\n  };\r\n};\r\n\r\nconst ExtraActions: React.FC<ExtraActionsProps> = ({ children, slotProps, className, ...props }) => {\r\n  return (\r\n    <Popover {...(slotProps?.popoverProps ?? {})}>\r\n      <PopoverTrigger {...(slotProps?.triggerProps ?? {})}>\r\n        <ElipsisVertical className=\"w-4.5 h-4.5 text-primary\" />\r\n      </PopoverTrigger>\r\n      <PopoverContent align=\"end\" className={cn(\"w-40\", className)} {...props}>\r\n        {children}\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nexport {\r\n  DataGrid,\r\n  DataGridContent,\r\n  DataGridActionBar,\r\n  SearchAction,\r\n  FreezeAction,\r\n  PrintAction,\r\n  RefreshAction,\r\n  ExtraActions,\r\n  DeleteAction,\r\n  type DataGridProps,\r\n  type DataGridContentProps,\r\n  type DatagridActionBarProps,\r\n  type SearchActionProps,\r\n  type FreezeActionProps,\r\n  type RefreshActionProps,\r\n  type ExtraActionsProps,\r\n  type DeleteActionProps,\r\n  useDataGrid,\r\n  dataGridDefaultTheme,\r\n};\r\n"],"names":["ModuleRegistry","AllCommunityModule","dataGridDefaultTheme","themeQuartz","DataGridContext","React","useDataGrid","context","DataGrid","children","gridId","api","setApi","rowData","setRowData","actionbarHeight","setActionbarHeight","quickFilterText","setQuickFilterText","actionbarExists","setActionbarExists","jsx","DataGridContent","forwardRef","propTheme","onGridReady","quickFilterTextProps","rowDataProps","containerStyle","props","ref","theme","useMemo","handleGridReady","e","AgGridReact","DataGridActionBar","className","cn","SearchAction","defaultOpen","isSearchInputOpen","setIsSearchInputOpen","isClosing","setIsClosing","inputRef","handleClear","handleOpen","handleClose","TextField","IconButton","Magnifier","CircleXmark","FreezeAction","freezeText","unFreezeText","onClick","disabled","pinnedRowCount","setPinnedRowCount","selectedRowsCount","setSelectedRowsCount","freezeRows","selectedRows","row","updatedNodes","pinnedRow","node","unfreezeRows","handleFreezing","Button","Snowflake","PrintAction","handlePrint","element","html","printHtml","Print","RefreshAction","onRefresh","loading","handleRefresh","Refresh","DeleteAction","onDelete","Trashcan","ExtraActions","slotProps","Popover","PopoverTrigger","ElipsisVertical","PopoverContent"],"mappings":"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"}